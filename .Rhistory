Educ.valid.std = Census$EducYears[-train]
Age.valid.std = Census$Age[-train]
Educ.valid.std = scale(train.X.std, center = attr(Educ.train.std, "scaled:center"), scale = attr(Educ.train.std, "scaled:scale"))
Educ.valid = Census$EducYears[-train]
Age.valid = Census$Age[-train]
Educ.valid.std = scale(Educ.valid, center = attr(Educ.train.std, "scaled:center"), scale = attr(Educ.train.std, "scaled:scale"))
Educ.valid = Census$EducYears[-train]
Age.valid = Census$Age[-train]
Educ.valid.std = scale(Educ.valid, center = attr(Educ.train.std, "scaled:center"), scale = attr(Educ.train.std, "scaled:scale"))
Educ.valid.std = scale(Educ.valid, center = attr(train.X.std, "scaled:center"), scale = attr(train.X.std, "scaled:scale"))
valid.x = cbind(Educ.valid, Age.valid)
valid.x.std = scale(Educ.valid, center = attr(train.X.std, "scaled:center"), scale = attr(train.X.std, "scaled:scale"))
valid.x.std = scale(valid.x, center = attr(train.X.std, "scaled:center"), scale = attr(train.X.std, "scaled:scale"))
train.x.scale = cbind(Educ.train.std, Age.train.std)
valid.x.std = scale(valid.x, center = attr(train.x.scale, "scaled:center"), scale = attr(train.x.scale, "scaled:scale"))
dim(train.x.scale)
dim(valid.x)
valid.x.std = scale(valid.x, center = attr(train.x.scale, "scaled:center"), scale = attr(train.x.scale, "scaled:scale"))
valid.x = cbind(Educ.valid, Age.valid)
valid.x.std = scale(valid.x, center = attr(train.x.scale, "scaled:center"), scale = attr(train.x.scale, "scaled:scale"))
Educ.valid = scale(Census$EducYears)[-train]
Age.valid = scale(Census$Age)[-train]
valid.x = cbind(Educ.valid, Age.valid)
valid.x.std = scale(valid.x, center = attr(train.x.scale, "scaled:center"), scale = attr(train.x.scale, "scaled:scale"))
dim(train.x.scale)
dim(valid.x)
length(train.x.std)
length(train.x.scale)
length(train.x.scale)
dim(train.x.scale)
#2
set.seed(1)
length(Census$Sex)
Educ.valid = scale(Census$EducYears[-train], center = attr(Age.train.std, "scaled:center"), scale = attr(Age.train.std, "scaled:scale"))
Educ.train.std = scale(Census$EducYears[train])
#2
set.seed(1)
train = sample(1:length(Census$Sex), 20000, replace = F)
Educ.train.std = scale(Census$EducYears[train])
Age.train.std = scale(Census$Age[train])
train.X.std = cbind(Educ.train.std, Age.train.std, Sex01[train])
Educ.valid = scale(Census$EducYears[-train], center = attr(Age.train.std, "scaled:center"), scale = attr(Age.train.std, "scaled:scale"))
Educ.valid = scale(Census$EducYears[-train], center = attr(Educ.train.std, "scaled:center"), scale = attr(Educ.train.std, "scaled:scale"))
#2
set.seed(1)
train = sample(1:length(Census$Sex), 20000, replace = F)
Educ.train.std = scale(Census$EducYears[train])
Age.train.std = scale(Census$Age[train])
train.X.std = cbind(Educ.train.std, Age.train.std, Sex01[train])
Educ.valid = scale(Census$EducYears[-train], center = attr(Educ.train.std, "scaled:center"), scale = attr(Educ.train.std, "scaled:scale"))
Age.valid = scale(Census$Age[-train], center = attr(Age.train.std, "scaled:center"), scale = attr(Age.train.std, "scaled:scale")
Age.valid = scale(Census$Age[-train], center = attr(Age.train.std, "scaled:center"), scale = attr(Age.train.std, "scaled:scale"))
Educ.valid = scale(Census$EducYears[-train], center = attr(Educ.train.std, "scaled:center"), scale = attr(Educ.train.std, "scaled:scale"))
Age.valid = scale(Census$Age[-train], center = attr(Age.train.std, "scaled:center"), scale = attr(Age.train.std, "scaled:scale"))
valid.x.std = cbind(Educ.valid, Age.valid, Sex01[-train])
prediction = knn(train.X.std, valid.x.std, Sex01[-train], k=25)
library(FNN)
prediction = knn(train.X.std, valid.x.std, Sex01[-train], k=25)
head(Census)
prediction = knn(train.X.std, valid.x.std, Census$Income[-train], k=25)
#2
set.seed(1)
train = sample(1:length(Census$Sex), 20000, replace = F)
Educ.train.std = scale(Census$EducYears[train])
Age.train.std = scale(Census$Age[train])
train.X.std = cbind(Educ.train.std, Age.train.std, Sex01[train])
Educ.valid = scale(Census$EducYears[-train], center = attr(Educ.train.std, "scaled:center"), scale = attr(Educ.train.std, "scaled:scale"))
Age.valid = scale(Census$Age[-train], center = attr(Age.train.std, "scaled:center"), scale = attr(Age.train.std, "scaled:scale"))
valid.x.std = cbind(Educ.valid, Age.valid, Sex01[-train])
prediction = knn(train.X.std, valid.x.std, Census$Income[-train], k=25)
prediction = knn(train.X.std, valid.x.std, Census$Income[train], k=25)
classification = knn(train.X.std, valid.x.std, Census$Income[train], k=25)
table(classification, Income[-train])
table(classification, Census$Income[-train])
#2
set.seed(1)
train = sample(1:length(Census$Sex), 20000, replace = F)
Educ.train.std = scale(Census$EducYears[train])
Age.train.std = scale(Census$Age[train])
train.X.std = cbind(Educ.train.std, Age.train.std, Sex01[train])
Educ.valid = scale(Census$EducYears[-train], center = attr(Educ.train.std, "scaled:center"), scale = attr(Educ.train.std, "scaled:scale"))
Age.valid = scale(Census$Age[-train], center = attr(Age.train.std, "scaled:center"), scale = attr(Age.train.std, "scaled:scale"))
valid.x.std = cbind(Educ.valid, Age.valid, Sex01[-train])
library(FNN)
classification = knn(train.X.std, valid.x.std, Census$Income[train], k=25)
table(classification, Census$Income[-train])
head(classification)
classification
write.csv(classification, file = "/home/badugi/Desktop/outcome.csv", rownames = FALSE)
write.csv(classification, file = "/home/badugi/Desktop/outcome.csv", row.names = FALSE)
head(valid.x.std)
colnames(outcome) = c("Educ.valid", "Age.valid", "Sex01", "predicted classification outcome")
outcome = cbind(valid.x.std, classification)
colnames(outcome) = c("Educ.valid", "Age.valid", "Sex01", "predicted classification outcome")
write.csv(outcome, file = "/home/badugi/Desktop/outcome.csv", row.names = FALSE)
write.csv(classification, file="/home/badugi/Desktop/clssification.csv", row.names = FALSE)
head(outcome)
head(classification)
outcome = cbind(valid.x.std, classification)
colnames(outcome) = c("Educ.valid", "Age.valid", "Sex01", "predicted classification outcome")
head(outcome)
write.csv(outcome, file = "/home/badugi/Desktop/outcome.csv", row.names = FALSE)
#2
set.seed(1)
train = sample(1:length(Census$Sex), 20000, replace = F)
Educ.train.std = scale(Census$EducYears[train])
Age.train.std = scale(Census$Age[train])
train.X.std = cbind(Educ.train.std, Age.train.std, Sex01[train])
Educ.valid = scale(Census$EducYears[-train], center = attr(Educ.train.std, "scaled:center"), scale = attr(Educ.train.std, "scaled:scale"))
Age.valid = scale(Census$Age[-train], center = attr(Age.train.std, "scaled:center"), scale = attr(Age.train.std, "scaled:scale"))
valid.x.std = cbind(Educ.valid, Age.valid, Sex01[-train])
library(FNN)
classification = knn(train.X.std, valid.x.std, Census$Income[train], k=25)
table(classification, Census$Income[-train])
head(valid.x.std)
outcome = cbind(valid.x.std, classification)
colnames(outcome) = c("Educ.valid", "Age.valid", "Sex01", "predicted classification outcome")
head(outcome)
head(classification)
classification
dim(classification)
write.csv(classification, file = "/home/badugi/Desktop/outcome.csv", row.names = FALSE)
predictions_df <- data.frame(id = 1:length(classification), prediction = classification, stringsAsFactors = FALSE)
head(predictions_df)
outcome = cbind(valid.x.std, predictions_df$prediction)
head(outcome)
outcome = cbind(valid.x.std$Educ.valid, predictions_df$prediction)
#2
set.seed(1)
train = sample(1:length(Census$Sex), 20000, replace = F)
Educ.train.std = scale(Census$EducYears[train])
Age.train.std = scale(Census$Age[train])
train.X.std = cbind(Educ.train.std, Age.train.std, Sex01[train])
Educ.valid.std = scale(Census$EducYears[-train], center = attr(Educ.train.std, "scaled:center"), scale = attr(Educ.train.std, "scaled:scale"))
Age.valid.std = scale(Census$Age[-train], center = attr(Age.train.std, "scaled:center"), scale = attr(Age.train.std, "scaled:scale"))
valid.x.std = cbind(Educ.valid.std, Age.valid.std, Sex01[-train])
library(FNN)
library(FNN)
classification = knn(train.X.std, valid.x.std, Census$Income[train], k=25)
outcome = cbind(Educ.valid.std, Age.valid.std, Sex01[-train], predictions_df$prediction)
head(outcome)
outcome = cbind(Educ.valid.std, Age.valid.std, Sex01[-train], classification)
head(outcome)
outcome = cbind(Sex01[-train], classification)
head(outcome)
outcome = cbind(classification)
head(outcome)
head(classification)
outcome = data.frame(valid.x.std)
head(outcome)
outcome = data.frame(valid.x.std, classification)
head(outcome)
write.csv(outcome, file = "/home/badugi/Desktop/outcome.csv", row.names = FALSE)
outcome = data.frame(valid.x.std, classification)
colnames(outcome) = c("Educ.valid.std", "Age.valid.std", "Sex01","predicted outcome")
write.csv(outcome, file = "/home/badugi/Desktop/outcome.csv", row.names = FALSE)
table(classification, Census$Income[-train])
(708+1832)/(8821+1832+708+1200)
2%%10
13%%3
x = 8
if(x %% 2 == 0){
x = x/2
}
print(x)
x = 9
if(x %%2 == 0){
else{
x = x+1
}
print(x)
}
18/4
for(j in 1:3){
for(k in 4:5){
print(j+k)
}
}
airport = read.csv("/home/badugi/Desktop/DS 710 Programming/Week 2 - Control Flow/Show what youre learning/my hw/ds710assignment2-master/airport.csv")
head(airport)
attach(airport)
print(x)
for(x in airport){
print(x)
}
for(x in airport){
if(Scheduled.Departures < Performed.Departures){
print(Airport)
}
}
for(x in airport){
if(Scheduled.Departures[x] < Performed.Departures[x]){
print(Airport)
}
}
head(airport)
total = 0
for(x in airport){
if(Scheduled.Departures[x] < Performed.Departures[x]){
total = total + Passengers
print(Airport)
}
}
print(total)
total = 0
for(x in airport){
if(Scheduled.Departures[x] < Performed.Departures[x]){
total = total + Passengers[x]
print(Airport)
}
}
print(total)
head(airport)
total = 0
for(x in length(Airport)){
if(Scheduled.Departures[x] < Performed.Departures[x]){
total = total + Passengers[x]
print(Airport)
}
}
print(total)
total = 0
for(x in 1:length(Airport)){
if(Scheduled.Departures[x] < Performed.Departures[x]){
total = total + Passengers[x]
print(Airport)
}
}
print(total)
total = 0
for(x in length(Airport)){
if(Scheduled.Departures[x] < Performed.Departures[x]){
total = total + Passengers[x]
print(Airport)
}
}
print(total)
install.packages("HSAUR")
data("clouds", package = "HSAUR")
attach(clouds)
boxplot(rainfall ~ seeding)
logRain = log(rainfall)
boxplot(logRain ~ seedign)
boxplot(logRain ~ seeding)
Cars = read.csv("/home/badugi/Desktop/DS 710 Programming/Week 3 - Exploratory Data Analysis/Show what youre learning/Cars 2005.csv")
head(Cars)
hist(Cars$Price)
install.packages("learningr")
data(obama_vs_mccain, package = "learningr")
head(obama_vs_mccain)
obama <- obama_vs_mccain$Obama
mean(obama)
var(obama)
sd(obama)
mad(obama)
#mean absolute deviation
mad(obama)
cummin(obama)
cumsum(obama)
cor(obama)
library(FNN)
avocado = read.csv("/home/badugi/Desktop/KNN project/avocado.csv")
head(avocado)
library(FNN)
avocado = read.csv("/home/badugi/Desktop/KNN project/avocado.csv")
head(avocado)
dim(avocado)
attach(avocado)
levels(year)
levels(type)
levels(region)
#fit response on all predictors.
Fullmodel = (AveragePrice ~ Total.Volume + X4046 + X4225 + X4770 + Total.Bags + Small.Bags + Large.Bags + XLarge.Bags)
Fullfit = knn.reg(Fullmodel, data = avocado)
library(FNN)
#fit response on all predictors.
Fullmodel = (AveragePrice ~ Total.Volume + X4046 + X4225 + X4770 + Total.Bags + Small.Bags + Large.Bags + XLarge.Bags)
dim(avocado)
sample(1:18249, 12044, replace = F)
train = sample(1:18249, 12044, replace = F)
library(Boston)
library(MASS)
data(Boston)
BostonStd = x = cbind(Boston$age, Boston$rad)
BostonStd = cbind(Boston$age, Boston$rad)
x.std =
x.std = scale(x)
x = cbind(Boston$age, Boston$rad)
x.std = scale(x)
BostonStd = cbind(x, x.std, Boston$crim)
colnames(BostonStd) = colnames("age", "rad", "age.std", "rad.std", "crim")
x = cbind(Boston$age, Boston$rad)
x.std = scale(x)
BostonStd = cbind(x, x.std, Boston$crim)
colnames(BostonStd) = colnames("age", "rad", "age.std", "rad.std", "crim")
BostonStd
head(BostonStd)
colnames(BostonStd) = c("age", "rad", "age.std", "rad.std", "crim")
dim(Boston)
x.std = cbind(BostonStd$age.std, BostonStd$rad.std)
head(BostonStd)
#1c
as.data.frame(BostonStd)
dim(BostonStd)
x.std = cbind(BostonStd$age.std, BostonStd$rad.std)
#1c
as.data.frame(BostonStd)
dim(BostonStd)
x.std = cbind(BostonStd$age.std, BostonStd$rad.std)
#1c
BostonStd = as.data.frame(BostonStd)
dim(BostonStd)
x.std = cbind(BostonStd$age.std, BostonStd$rad.std)
y = BostonStd$crim
#1d
library(FNN)
predictions = knn.reg(x.std, x.std, y, k=25)
mean((y-predictions$pred)^2)
library(FNN)
library(MASS)
data(Boston)
head(Boston)
x = cbind(Boston$age, Boston$rad)
x.std = scale(x)
library(FNN)
library(MASS)
data(Boston)
x = cbind(Boston$age, Boston$rad)
x.std = scale(x)
BostonStd = cbind(x, x.std, Boston$crim)
colnames(BostonStd) = c("age","rad","age.std","rad.std","crim")
head(BostonStd)
head(Boston)
#1b.
dim(BostonStd)
#1c.
x.std = cbind(BostonStd$age.std, BostonStd$rad.std)
#1c.
x.std = cbind(age.std, rad.std)
#1c.
BostonStd = data.frame(BostonStd)
x.std = cbind(BostonStd$age.std, BostonStd$rad.std)
y = BostonStd$crim
#1d.
knn.reg(x.std, x.std, y, k=25)
#1d.
predictions = knn.reg(x.std, x.std, y, k=25)
MSE = mean((y - predictions)^2)
y
MSE = mean((y - predictions)^2)
dim(y)
y
y = as.numeric(BostonStd$crim)
#1d.
predictions = knn.reg(x.std, x.std, y, k=25)
MSE = mean((y - predictions)^2)
dim(y)
y
predictions
y = as.numeric(BostonStd$crim)
#1d.
predictions = knn.reg(x.std, x.std, y, k=25)
MSE = mean((y - predictions)^2)
MSE = mean((y - predictions$pred)^2)
MSE
#2c
head(x.std)
#3a
set.seed(100)
groups = c(rep(1:m, floor(n/m)), 1:(n%%m))
#3a
set.seed(100)
m=10
#1b.
n = dim(BostonStd)[1]
groups = c(rep(1:m, floor(n/m)), 1:(n%%m))
cvgroups = sample()
floor(506)
floor(506.3)
6%%4
4%%6
groups
506%%1
506%%2
506%%3
506%%4
506%%5
506%%6
506%%7
506%%8
506%%9
506%%10
groups = c(rep(1:m, floor(n/m)))
groups
groups = c(rep(1:m, floor(n/m)), 1:(n%%m))
groups
mfoldcvpredictions = rep(NA, n)
mfoldcvpredictions = rep(NA, n)
for(fold in 1:m){
train.x = x.std[cvgroups!=fold,]
train.x.std = scale(train.x)
train.y = y[cvgroups != fold]
valid.x = x.std[cvgroups == fold,]
valid.x.std = scale(valid.x, center = attr(train.x.std, "scaled:center"), scale = attr(train.x.std, "scaled:scale"))
predictions = knn.reg(train.x.std, valid.x.std, train.y, k=25)
mfoldcvpredictions[cvgroups == fold] = predictions$pred
}
mean((y-mfoldCVpredictions)^2)
mfoldcvpredictions = rep(NA, n)
for(fold in 1:m){
train.x = x.std[cvgroups!=fold,]
train.x.std = scale(train.x)
train.y = y[cvgroups != fold]
valid.x = x.std[cvgroups == fold,]
valid.x.std = scale(valid.x, center = attr(train.x.std, "scaled:center"), scale = attr(train.x.std, "scaled:scale"))
predictions = knn.reg(train.x.std, valid.x.std, train.y, k=25)
mfoldcvpredictions[cvgroups == fold] = predictions$pred
}
#3a
set.seed(100)
m=10
groups = c(rep(1:m, floor(n/m)), 1:(n%%m))
groups
cvgroups = sample(groups,n)
mfoldcvpredictions = rep(NA, n)
for(fold in 1:m){
train.x = x.std[cvgroups!=fold,]
train.x.std = scale(train.x)
train.y = y[cvgroups != fold]
valid.x = x.std[cvgroups == fold,]
valid.x.std = scale(valid.x, center = attr(train.x.std, "scaled:center"), scale = attr(train.x.std, "scaled:scale"))
predictions = knn.reg(train.x.std, valid.x.std, train.y, k=25)
mfoldcvpredictions[cvgroups == fold] = predictions$pred
}
mean((y-mfoldCVpredictions)^2)
mean((y-mfoldcvpredictions)^2)
#4c
log.crim = lm(Boston$crim~Boston$age+Boston$rad, replace = f)
#4c
log.crim = lm(Boston, Boston$crim~Boston$age+Boston$rad, replace = f)
?lm
#4c
log.crim = lm(Boston$crim~Boston$age+Boston$rad, data = Boston, replace = f)
#4c
log.crim = lm(Boston$crim~Boston$age+Boston$rad, data = Boston)
summary(log.crim)
#5a
BostonTrans = cbind(Boston$age, Boston$rad, log(Boston$crim))
colnames(BostonTrans) = c("age", "rad", "log.crim")
BostonTrans = as.data.frame(BostonTrans)
head(BostonTrans)
#5b
ok = lm(log.crim ~ age + rad, data = BostonTrans)
summary(ok)
beta.fn = function(inputdata, index){
lmfitboot = lm(log.crim~., data = inputdata[index,])
return(lmfitboot$coef)
}
beta.fn(BostonTrans, 1:n)
#5d
library(boot)
set.seed(100)
bootoutput = boot(BostonTrans, beta.fn, R = 5000)
print(bootoutput)
round(sd((bootoutput$t)[,1]),6); hist((bootoutput$t)[,1])
round(sd((bootoutput$t)[,2]),6); hist((bootoutput$t)[,2])
round(sd((bootoutput$t)[,3]),6); hist((bootoutput$t)[,3])
library(FNN)
avocado = read.csv("/home/badugi/Desktop/KNN project/avocado.csv")
attach(avocado)
head(avocado)
dim(avocado)
boxplot(avocado$AveragePrice)
boxplot(avocado$Total.Volume)
summary(avocado)
sd(Total.Volume)
sd(X4046)
boxplot(x4046)
boxplot(X4046)
logX4046 = log(X4046)
boxplot(logX4046)
summary(logX4046)
library(FNN)
set.seed(1)
m = 10
groups = c(rep(1:m, floor(n/m)), 1:(n%%m))
n = dim(avocado)[1]
library(FNN)
avocado = read.csv("/home/badugi/Desktop/KNN project/avocado.csv")
attach(avocado)
head(avocado)
n = dim(avocado)[1]
set.seed(1)
m = 10
groups = c(rep(1:m, floor(n/m)), 1:(n%%m))
groups
cvgroups = sample(groups,n)
cgroups
cvgroups
mfoldcvpredictions = rep(NA, n)
head(avocado)
library(FNN)
library(MASS)
data(Boston)
head(Boston)
setwd("/home/badugi/Desktop/KNN project/Pokemon")
pokemon = read.csv("pokemon.csv")
pokemoncombat = read.csv("combats.csv")
tests = read.csv("tests.csv")
head(pokemon)
head(pokemoncombat)
dim(pokemoncombat)
